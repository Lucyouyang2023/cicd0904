# .github/workflows/ci-cd.yml  
name: CI/CD Pipeline  

on:  
  workflow_run:
    workflows: ["Terraform Workflow"]
    types:
      - completed

jobs:
  cicd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run some steps for CI/CD Pipeline 
        run: echo "Running CI/CD Pipeline "


  build:
    runs-on: ubuntu-latest  

    steps:  
      - name: Checkout code  
        uses: actions/checkout@v3  

      - name: Set up Docker Buildx  
        uses: docker/setup-buildx-action@v2  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
          registry-type: private
        env:
          AWS_REGION: ap-northeast-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      
      - name: Build and push Docker image
        env:
          ECR_REPOSITORY_URL: ${{ env.ECR_REPOSITORY_URL }}  
        run: |  
          docker build -t my-app .  
          docker tag my-app:latest $ECR_REPOSITORY_URL:latest
          docker push $ECR_REPOSITORY_URL:latest
      - name: Deploy to ECS  
        run: |  
          aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment

        env:
          AWS_REGION: ap-northeast-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
      - name: Start ECS Task
        run: |
          #aws ecs run-task --cluster my-cluster --launch-type FARGATE --task-definition my-task --count 1 --network-configuration "awsvpcConfiguration={subnets=[subnet-06dc3d3506ca8fda6],securityGroups=[sg-062f33075809b6fb5],assignPublicIp=ENABLED}"  
          aws ecs run-task --cluster my-cluster --launch-type FARGATE --task-definition my-task --count 1 --network-configuration "awsvpcConfiguration={subnets=[${{ steps.subnet.outputs.subnet_id }}],securityGroups=[${{ steps.sg.outputs.security_group_id }}],assignPublicIp=ENABLED}"  
        env:
          AWS_REGION: ap-northeast-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          

          